<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ofdDialog.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAACEwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFv
        ck5UAc+id5oAABK8SURBVHja7Z3rc5XVucAzI8MQZuRL+Q8ocinoySm2KKAtSlW8VAloK95aWy3tqQUs
        eioWFSGgHkgg4RoCRFAh5L5zv2fnRnZ27uTyvX6qDh1nejh+YOY563nzbgnbcEn2TrLfvX7PzG/yfWc9
        v3ddnvWshASCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
        IAiCIIibR1f6MNhGxnBC6+6+hNMPlSfs/2GOJyEmJ+lnGGYaZhkSIU7JGE40Akg8vbos0SRTrDPLMNMw
        AxlEP+nnGJIM6w3bDZkGn8FvCBiCEIdkDAdbU/qDZgYQNAkUywQMfoPPkGnYblhvSDLMQQYTS3xN+pWG
        nYY6wz8MVw0ClpAxLG17+iX7FxViksZrXDX8w1Bn2GlYNZYMSPzvJ/4PDBvdL/xlEsFuAVzce0nOPFrp
        RQGEc9mdIWw0/MB6EYyR+Lrue9pQbbhCAoBy8aNLcnZtVTwIIMQVQ7XhaXfvwE4RhCX/QsMxw78Y9DCa
        9o+NAB6PKwGE+JfhuGGhdQIYlfh3GJ40dDHY4UYC+OyJuBRAiC7Dk4Y7rJDAqOSfbdhq+CcDHW4ogE/i
        XgDKPw2b3aPE+JXAqOS/07CbtT7cWgADNghA+bfhA8OdcSeBsPX+bDf5v2WAw62XANYIQPnWsNswO672
        BcLW/FsM/8vgBss3AW92SrAlbvYEwr7+zxi+YmDDuI4BH6u0SQDK14Z1cTELGJX8iwy9DGoYXyFQv3z6
        iHUCUHoNizwtgLB1fxaDGsZdCpzSL9lrKmwUgJI1ej/AywJINnzDoIbxCqB1d5+cWl1mqwC+MSR7UgBh
        tf3VDGiYiACad/ZK1gOlsn9ejq0S0LLhuZ6TwCgBbOS8HyYqgKb3e+TECp/NArjiXiDypADmuLf6GMww
        brqNABp3dMux5cU2C0ApCV0l9trXfyVXeiGSGUDDO11yZFmR7QK47PYT8MYsYJQAdjKQIRJqtnXIoaQC
        2wUgblMRTwlAp//1DGKIhMq/tEvG3fkI4Ic59Z5YBoz6+msPvy8ZxDBROg8OS9kf2yR9SZ7tya986fYY
        jO1ZwCgBrKeHH0QkgANDUvxqsxxYnIsARnoMrveSAN5iEEMkBNOGJH9jo6QtQAAu270iAL31d5RBDJHQ
        kTooOcl1kjr/Ask/Qmbo3YFYF8BMzv+BZiBRx+c+PhLzApjlPtrBQIaI7gGcfqicxL+GP9Q2LNYFkOi+
        2MNAhgkLwL+jRzLv93EEeI1AqJW4FwQQZCBDJGXAdW93ypEfFyKAawQRANhXBETiIwCwtAZgEUeACACs
        PAK88Gy9pN7FESACAOs2APUIMM7eBEQAALcrgJZdfXLywVKSHgGAjQKof6dTjt5bRNIjALBRAJVvtEvG
        Uk4AEABYeQJQ9JsmSVvICQACAOsI7BuUc8/USup8kh4BgH2Pgezp5w4AAgBbBdD4bpcc+2kxJcAIAGyk
        4o2LlAAjALB1A7DwJb+kLaACEAGAlU1APn+yWvazAYgAwD787/XIiZUlrP8RANhI9Zs8BIIAwNouwFoA
        xBVgBAA2nv/v7Zezj1fRBRgBgI0CaNDzf30JmERHAGDrM2Cc/yMAoAMQIADgDQBAAGABtduCIy3ASXIE
        APYd/xW+7Of4DwGArdd/zzxWyf1/BAA2CsCZ/i9j+o8AwM72X69Q/YcAwEqc6f+jlSQ3AgArL/9sDbD7
        jwDAzt3/Qcl7voHmHwgArCz+SaH4BwGAtdT8tUMOJxVy9x8BgH29/wck91dm+r+Q6T8CAOum//4d3SOt
        v0hqBAD2nf2X/qFV0pfkkdQIAOzb/OuXs2vp/IMAwM6z/y2Bkc0/EhoBgH2bfxeeq+fsHwGAjdP/+ne6
        JPN+H8mMAICLP4AAwBqad/ZS+YcAwMq6/1R99KNZDv6Ioz8EANat/fXrf/JnZSQxAgAb1/5Oz/+l+dT9
        IwCwrvBnV5+ceaSSwh8EADZ+/Utea5GMu3nxBwGAfR1/U/ole00FyYsAwLqvf5pZ+29qlYx7CkheBAC2
        ff2b3uuR06vLWfsjALDxtV/f71o490cAYCMtH/ZK9sOs/REA2PfU9/5BKXylia8/AiAZrHzp9+0gN/4Q
        AAKw8uu/b1ByNtRx3x8BIAArW31v65Cj9xaRrAgAAdjGxb398sUvayT1Lr7+CAABWPbM15CUvt4qhyj6
        QQAIwD4atndJ1oOlkjqfREUACMCuqf9Hl+R8ci2tvhAAArDykY9NbXI4iak/AkAA1uHf0eN0+mHqjwAQ
        gGWXfdo/viQ56+uY+iMABGBrm69DTP0RAAKwD33gI+uBUtnP1B8BIAC7aNvbL+eerpG0hUz9EQACsK7g
        p+T3LRT8IAAEYOXU/2+dcmJlCcmIABCAdVP/PSO1/tz0QwAIwLqnvQal+NVm2nsjAARgY/JXbQ7I8fto
        8oEAEIBdHByW2m0dkrnCR7UfAkAA1j3rtbtPzq6t4o4/AkAANm76XXiuXtJp7okAEICFnX1f8kv6EpIf
        ASAA+zb9tgTk2PJikg4BIADbXvSpebNDsh4oYd2PABCAbTv+/h3dcubRSpIfASAAG5/z+uzxKjnAJR8E
        gADsQo/7zq+r5TkvBIAArDvuS3GP+5aS/AgAAVj2mMclyX+hkRp/BIAArOvp98mAFP2mSQ79B3f7EQAC
        sCr5A/8zkvyH/7OQxEIACMC2F3y1qw+9/BEAArCwxNf3arMc4cuPABCAXei0X7/8R35M8iMABGAVoQ2/
        w0kkPwJAAJYd9fVL0Sts+CEABGBfhV9Kv+RvbJQM2ngjAARgWfLv6pPc5+olYylFPggAAVh1pbd5Z6+c
        T66joQcCQAC2Jb9e6dU+flzsQQAIwLJnu6q3BuTTX1RwpRcBIACrzvj3jfTuz1pVIqnzaeaBABCANXX9
        2r234EW/HPtJMZ18EAACsKmFl3bx0Z3+9CXs9CMABGDVel+bd2r/Pjb7EAACsOxCj673M+/3MeVHAAjA
        pim/9u7Tmn7t2c9bfQgAAVj0WEfd20H5/Mlq2nchAARg2xt9eoc/c0WJpC1gyo8AEIAVx3udB4ak/m+d
        8sUva/jqAwKw6grvR5ek9A+tcmKV+eov5KsPCMCa473Gd7vl3LrakW69bPQBArBkrb+3X0peb5WsB0rN
        V59afkAAVqz1g2mDzlr/3DN89QEB2LfD//sW5xIPX31AAJYU9GiHXr26+9kTVSM7/Hz1AQHY8CjHgNT8
        tcOZ7mt7bqr5AAHY0KnnwJA0f9ArBS82yvH7fBT0AAKwY4NvyGnRpfX7p1aXy8HFrPMBAViR+C27+qTk
        tRY59fMyEh8iZ54RwDwjgHkIIKbLd1t29krxb5vlpEn89KX5rPMhYvSE6HBSYTDzPl/i0XuLEEAs3tH3
        v9djvvitkr2mwkl8Bi5E8LV3Phw6jrQw7MKz9VL5l/agGWOJtW8FEUAsle42vd8jhS/5nbN87c7DFx8i
        +tovuOA84/bpIxXi+12LM770A9N50ORUhpNbCGA6p/mhl3b1fn7+C41y8me6xqctF0TGgUW5TqMXvQdS
        /WbAedNRPzCjxl/QzS0EMG3r+119UvHni3I+udb5Z1G9B9FI/MwVPueIuPHdLgl8MnDdxwYBTPPXXp/W
        rn+nS4pfbXYe3Th0TwG9+CAydH2/JM+ZPerjrQ1mfOk0/xZjEgFMVamu/jP0fb2qze2Ss77OKd5xjvJY
        30MUvvhZq0qd2pCmD3rDp/kIYLq+9PqP0KabFW+YpN9QJ1kPlkrGPflU7UFU0A1irQnRxG/8e7cEU4fG
        O1YRQNSTPnXQSfqqLQFnQy/74XI5lFRwLennMXAhwi/+4pE1ft7zjeLf0ePsJY2xvkcAk57wupF3cEgC
        +wZGpvcm6fOeb3DO7Z2kp/UWRLl4R99uKHzZ79SI3MYaHwFMxno+9JXXYzu9e//F0zVOcYU232AXH6KN
        Ps6q5/g6znTMOYmfEZXxjABuNaV3Et6s5fUMtWF7l3Nkp1N73b0/sqzIOa/n9VyYrJ193TM6u7bKmV3q
        GNTxGMVxjgBCU/lQwneaZNdjupYPzRf+vzudTrq5v2pw3sw7vrzYabbhfOXZvYdJ3tnXI70yM/60t+MN
        zvERwLgSPOP6HXpdu6tVtTSydltQyja1Omeonz1R7UzptcGGU4p716gNPDbxYFKn+znOdD9nQ/3Izn7a
        0GQkvocEkDGc4NQrZzh1y99L5m6X777gB0cq7PSH07WSlthqkusmnRbfaNussk1tUvCiX86ZNVX2mnJn
        R1V/dE3263brSXaY4q/+qdVlUv6nNmn/eGAqlrqxL4DWlP6Etj39ieZvUDfetHRWk1m/2mpIXZfrVF3b
        YlW+0e5M2bXCrsCs07XgRt++0115fRDj6L1FzkZdKNG/u2RDssM0f/V1tpn7XIPT7MU51puava7YF8Dp
        h8sTsh+uSDR/g6cfKncKH7Sg5sTKEqea7thPip0fTxNbrzpqcus5qa7Tdep+3U06khxi9av/Xxed2eoU
        n2rFvgC0XZHbtig41h3n62BAgYd2+A8nFch5M0vVM32tJ5mGY22PCwDAowU9J80sVper+mbjNNa1IACA
        qfzq61L1/LpaZ+9qHJd2EAACAK935dGN6NLXzVd/76VYKWlHAABTMeXXaj59rzEGvvoIAGCq0MrRz5+q
        Fv973bF4ixUBAEwWekStNSltKVGv4UcAALG83tcalfI/tjk3R2O4jwUCAIhql57Fec56v/atoHTEdvIj
        AIBoopWoI+v9Hq/0q0QAAFHZ7LunwGnDrfdVOg8OIwAEALagl8y0MadT1ZfhqY7VCAAgksq+Yz8tdl5s
        7tg34MWW9QgAYKJXeLVBp/aWiEJzTgSAAMAzyX/XBechDu0/4YGdfgQAEM0OvdouThvQxFhZLwIAmOwv
        v17j1eSfwq49CAABQKwkf93bnV465kMAANFIfm1Fp9V9cZT8CADgtjb8zJo/DpMfAQDc6qgvztb8CADg
        ts/5V/ikanMgXpMfAQDcKPmPLS92WnUHvX3OjwAAxlveq7X92rG3Y19cJz8CAAhHe/Xrk+/T8EgHAkAA
        ML1XevOdNyPbP/bcrT4EABAJ+kTX+eTa6X6oAwEgAJjy5F+Y67VOPggAIFqbfnrWry/1WJb8CABIfm3d
        Xf6ntni42Rf3AggwaCG6O/6FUrap1et3+iMh4BUBzDL4GbQQzXV/zoY6m3b8x8JvmOUFAcw0+Bi4EJWH
        O/StvserpOn9HlsTP4TPMNMLArjDcJTBC9Ho6HN6dbn4d3TbnvxKpmGGFwSgvMUAhkg5sqxIKv58MZ4v
        +IyH7Zr8XhHAesNVBjFMlIM/ypO8XzdI4JMBkj99+Kphg5cEkGT4koEME23skb2mgnX/Nb40JMW8AEZJ
        YI6hnsEME329p2pzO1P/a9Qb5sR88ofNAnYymGEiU//8jY223PC7XT70xNc/TACrDJcZ1DCeqf+ZRyul
        5cNekv4alw2rPCOAsGVACQMbbhct9dWefiT9dZR4Zvo/xixgo+EKgxtuRfqSPCl8ucnLb/dNBlcML3jq
        6x8mgLmGagY43LTab4GZ+j9mpv67+mwu9R2LasNczwkgTALJhm8Y6HDDqf/yYqnaGojHXv6R8I0h2ZPJ
        HyaA2YYsBjrcaOqvrb0C+9j1D+OkYbZnBRAmgUWGXgY8hNf6665/M7v+4fQaFns6+cMEoKwzfM3Ah+8K
        fpYVSdUWnfpT8DOKrw3rQsnvaQGESUBvCW7lVABCG385z9ZR8HM9/zZsMdwRF8k/xixA9wN2G74lCezm
        +H0+W3v73Yj/M3wQavoRNwIYQwR3uhJgJmBrue/iXMn9dQNn/td/+TX574y7xL/JycCbhq9ICPuae576
        eZk0/p0mHy5fGTaP/vLHdYTtCTxl6CIxLGGevuhT4LzlZ2ln33C6DE/F1Zp/AvsCi9w6AYqFLECP/dr2
        9FPkkz6cZVgUl+v9cQogtCRIdsuG2RuI1/f87s6Xktdabb7nf8Ut700eXeRjnQBuIoK57gUiH1eJ4++q
        79m1VdKq9f52Xun1uRd75lqf+LchgjluPwFtKlLnthejx6CH1/6HkgqcLj9ddtT7X3XbeNW5zTxWha70
        kvjjE0FIBtpjcINhuyHTnSE0GTrcZ8ggxjm1uizYmtIX7MpwnriKJzoMTe4XPtPt3rvB7eH3vaQn8SOT
        gTLDfXxklvsMGcQ4Zvqf+PlTNYkd+wcTjQAS3Seu4olZ7qMdM8ZKeJJ+8mQAHiB1fk7Cp49UJlz86FKC
        EUDCjZIk3iAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
        giAIgrhF/D/ea025PjXS1AAAAABJRU5ErkJggg==
</value>
  </data>
</root>